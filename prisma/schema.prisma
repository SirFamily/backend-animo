// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum StatusBooking {
  CONFIRMED
  PENDING
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  firstName      String
  lastName       String
  email          String    @unique
  password       String
  phone          String?
  identityNumber String?      @unique
  address        String?
  zipcode        String?
  city           String?
  district       String?
  img_profile    String?
  createDate DateTime  @default(now())
  pets           Pet[]
  host           Host[]
  bookings       Booking[]
  Review         Review[]
}

model Pet {
  id             Int                 @id @default(autoincrement())
  petName            String
  petType            String?
  birthDate          DateTime?
  weight             Float?
  height             Float?
  color              String?
  gender             String?
  healthStatus       String?
  chipId             String?
  img_pet            String?
  owner              User                @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId            String
  pets_count_booking pet_count_booking[]
}

model Host {
  id      Int       @id @default(autoincrement())
  hostName     String
  location     String
  description  String?
  publish      Boolean   @default(false)
  propertyType String
  user         User      @relation(fields: [hostUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostUserId   String
  rooms        Room[]
  Bookings     Booking[]
}

model Room {
  id         Int              @id @default(autoincrement())
  roomName        String
  description     String?
  maximumAnimal   Int
  state           String
  host            Host             @relation(fields: [hostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  hostId          Int
  rooms_img       Room_img[]
  rooms_amenities Room_amenities[]
  booking         Booking[]
}

model Room_img {
  id Int     @id @default(autoincrement())
  image       String?
  room        Room    @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId      Int
}

model Room_amenities {
  id Int       @id @default(autoincrement())
  amenities         Amenities @relation(fields: [amenitiesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  amenitiesId       Int
  room              Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roomId            Int
}

model Amenities {
  id       Int              @id @default(autoincrement())
  name           String
  imgIcon        String
  room_amenities Room_amenities[]
}

model Booking {
  id         Int                 @id @default(autoincrement())
  checkInDate        DateTime
  checkOutDate       DateTime
  totalPrice         Float
  bookingDatetime    DateTime            @default(now())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
  host               Host                @relation(fields: [hostId], references: [id])
  hostId             Int
  room               Room                @relation(fields: [roomId], references: [id])
  roomId             Int
  pets_count_booking pet_count_booking[]
  booking_history    Bookings_history[]
  status_booking     Status_booking[]
}

model pet_count_booking {
  pet_bookings_id Int     @id @default(autoincrement())
  pet             Pet     @relation(fields: [petId], references: [id])
  petId           Int
  booking         Booking @relation(fields: [bookingId], references: [id])
  bookingId       Int
}

model Bookings_history {
  id       Int              @id @default(autoincrement())
  checkInDate      DateTime
  checkOutDate     DateTime
  totalPrice       Float
  bookingDatetime  DateTime         @default(now())
  checkOutDatetime DateTime?
  booking          Booking          @relation(fields: [bookingId], references: [id])
  bookingId        Int
  status_booking   Status_booking[]
  review           Review[]
}

model Status_booking {
  status_id  Int              @id @default(autoincrement())
  bookingStatus      StatusBooking    @default(PENDING)
  booking            Booking          @relation(fields: [bookingId], references: [id])
  bookingId          Int
  bookings_history   Bookings_history @relation(fields: [bookings_historyId], references: [id])
  bookings_historyId Int
}

model Review {
  id         Int              @id @default(autoincrement())
  rating            String
  reviewText        String?
  datePosted        DateTime         @default(now())
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  bookings_history  Bookings_history @relation(fields: [bookingsHistoryId], references: [id])
  bookingsHistoryId Int
}
